/*
 * Esta clase registra las transacciones realizadas en el cajero entre cuentas.
 * Registra los depósitos y los ingresos de dinero entre cuentas.
 */

package cajero;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Stack;

/**
 *
 * La clase `historialTransacciones` registra las transacciones entre cuentas en el cajero.
 */
public class historialTransacciones {
    // Atributos
    String cuenta1;
    String cuenta2;
    double deposito;
    
    //----------------------------------------------
    // Ruta del archivo de registro
    String dir = "C:\\Users\\fband\\Downloads\\cajero (1)\\cajero\\registro\\registros.txt";
    //----------------------------------------------
    
    // Constructor
    public historialTransacciones(String cuenta1, String cuenta2, double deposito) {
       this.cuenta1 = cuenta1;
       this.cuenta2 = cuenta2;
       this.deposito = deposito;
   }
    
    /**
     * Busca líneas que coincidan con el prefijo dado en un archivo.
     * @param filePath La ruta del archivo a buscar.
     * @param prefix El prefijo que se busca en las líneas.
     * @return Una cadena que contiene las líneas que coinciden con el prefijo.
     */
    public static String findMatchingLines(String filePath, String prefix) {
       Stack<String> stack = new Stack<>();
        StringBuilder result = new StringBuilder();
        int count = 0;
        String prefixWithColon = prefix + ": ";

        // Primero leemos el archivo y guardamos las líneas en un stack
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                stack.push(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Ahora leemos desde el stack (que nos da las líneas de abajo hacia arriba)
        while (!stack.isEmpty() && count < 10) {
            String line = stack.pop();
            if (line.startsWith(prefixWithColon)) {
                // Guardamos toda la línea que coincide con el prefijo
                result.append(line).append("\n");
                count++;
            }
        }

        return result.toString();
    }
    
    /**
     * Obtiene la fecha actual.
     * @return La fecha actual.
     */
    public static LocalDate obtenerFechaActual() {
        return LocalDate.now();
    }
    
    /**
     * Obtiene la hora actual en formato HH:mm:ss.
     * @return La hora actual.
     */
    public static String getCurrentTimeWithIntegerSeconds() {
        // Obtén la hora actual
        LocalDateTime now = LocalDateTime.now();
        
        // Formatea la hora actual a una cadena, incluyendo segundos como enteros
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");
        return now.format(formatter);
    }
    
    /**
     * Agrega una línea al archivo dado.
     * @param filePath La ruta del archivo.
     * @param nuevaLinea La línea a agregar.
     */
    public static void agregarLinea(String filePath, String nuevaLinea) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath, true))) {
            writer.write(nuevaLinea);
            writer.newLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Guarda la transacción de depósito en el historial.
     */
    public void guardarDeposito() {
         LocalDate fechaActual = LocalDate.now();
        // Convertir la fecha actual a String
        String fechaString = fechaActual.toString();

        // Obtener la hora actual
       
        // Convertir la hora actual a String
       String currentTime = getCurrentTimeWithIntegerSeconds();
        String hist = cuenta1 + ": " + fechaString + " " + currentTime + " " + "SE DEPOSITO: " + deposito + " A LA CUENTA: " + cuenta2;
        agregarLinea(dir, hist);
     }
    
    /**
     * Guarda la transacción de ingreso en el historial.
     */
    public void guardarIngreso() {
         LocalDate fechaActual = LocalDate.now();
        // Convertir la fecha actual a String
        String fechaString = fechaActual.toString();

        // Obtener la hora actual
       
        // Convertir la hora actual a String
       String currentTime = getCurrentTimeWithIntegerSeconds();
        String hist = cuenta2 + ": " + fechaString + " " + currentTime + " " + "LA CUENTA: " + cuenta1 + " TE DEPOSITO: " + deposito;
        agregarLinea(dir, hist);
     }
}
